 package com.vexterra;
import java.awt.Component;
import java.awt.Container;
import java.util.*;
import java.awt.event.*;
import javax.swing.JPanel;

/**
 * This class implements the generic utility functions which are needed by all the Views (Panels). So all the Panels such as
 * MessagePanel, ControlPanel and CaterersPanel ) extend from this class.
 * Most importantly it implements the Observer interface which allows the panels to be added as observers to the models.
 * The update() method is abstract because it depends on what the panel wants to show and so this methods has to be
 * implemented by the actual Panel class.
 * This class also implements KeyListener interface which will be useful in future enhancements for adding Help Support ( F1 ) etc.
 *
 * This class also provides a mechanism for the controllers to listen to the user actions such as pressing a button or
 * clicking a menu, generated by the Panel. In this application there is only one controller (ClientController) which
 * is interested in such events. To provide this funtionality, it has an ArrayList that stores the ActionListener objects
 * (the Controllers) that are interested in events generated by this panel. A controller can register itself with the
 * panel by calling the addUserActionListener(). The actionPerformed() method of each of the controllers is called with
 * appropriate actioncommand.
 * It is important to understand that these action events are not the actual AWT events. There may be lot of ActionEvents
 * that are generated in a Panel but it does not make sense to pass all the events to the Controller. For example,
 * there could be a menu item that hide or unhides a particular component on a Panel. When the user clicks on this menu
 * item, there may not be any need for the Panel to send this even to the controller because the Panel can take
 * appropriate action and change the view without any help of the controller. Therefore, in this case, the Panel will
 * not send this even to the controller. On the other hand, when the user clicks a  "Search" button, the Panel has to send
 * the event to the controller so that the controller can fetch the required data. Once the controller puts the data
 * in the model, the controller will call setUpdated(true); and notifyObservers() on the model. The Panel can then update
 * its view accordingly.
 * This is a typical usage of the MVC pattern.
 * So, such event are actually handled by the Panel itself but in certain cases where it is necessary for the panel to
 * get the model updated by the controller, it sends an ActionEvent with an appropriate ActionCommand to the controller.
 * So, here, ActionEvents are only meant for holding an actioncommand.
 */



public abstract class BasePanel extends JPanel  implements Observer, KeyListener {
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 7557274369492305185L;
	/**
     * This ArrayList stores the Controllers that are interested in events generated by this panel.
     */
    
    private ArrayList userlisteners;
    /**
     * The model this panel is using to display information to the user.
     */
    
    
    private Observable model;
    
    /**
     * Initializes the fields.
     */
    public BasePanel() {
        userlisteners = new ArrayList();
        model = null;
    }
    
    /**
     * Adds a Controller.
     */
    public final synchronized void addUserActionListener(ActionListener viewlistener) {
        userlisteners.add(viewlistener);
    }
    
    public final Observable getModel() {
        return model;
    }
    
    public void keyPressed(KeyEvent ke) {
        System.out.println("Caught key pressed event.");
    }
    public void keyReleased(KeyEvent ke){}
    public void keyTyped(KeyEvent ke){}
    
    /**
     * This is a convenience method used by Panels to post events to the controller.
     * @param viewevent The view event to be posted to the controller(s).
     */
    protected void postUserActionEvent(ActionEvent viewevent) {
        ArrayList list = (ArrayList)userlisteners.clone();
        
        for(int i = 0; i < list.size(); i++) {
            ActionListener viewlistener = (ActionListener)list.get(i);
            viewlistener.actionPerformed(viewevent);
        }
    }
    public final synchronized void removeUserActionListener(ActionListener viewlistener) {
        userlisteners.remove(viewlistener);
    }
    public final void setModel(Observable newModel) {
        model = newModel;
    }
    
    /**
     * This method has to be implemented by the action view panel because only the panel knows what it needs to display.
     */
    public abstract void update(Observable observable, Object obj);
}
